 this le should describe the design and implementation of your cache simulator. How
did you implement the direct mapped cache, the n-way associative cache, the replacement algorithm,
and the write back vs. write through caches? For this assignment, you do not have to worry about
analyzing the time and space behavior of your program.





i implemented all the caches with an array
i used a counter for the LRU algorithm 

i first did the write through
then i checked if it was read 
then i had a flag if it was asssociative, direct or nway 
if it was a cache hit i added to my counter 
else if it was a miss
i used LRU
and read from memory


if it was write 
then i had a flag if it was asssociative, direct or nway 
if it was a hit i increased counter
else if it was a miss
i wrote to memory

then i did writeback 
then i checked if it was read
then i had a flag if it was asssociative, direct or nway 
i checked if it was a cache hit or a miss
if a miss
i used a counter to keep track of the oldest one
checked if it was a dirty bit
if it was i wrote to memory and read from memory if not i just read from memory
and then i made it not dirty
if it was a hit, i just did cache hit++

if it was write 
then i had a flag if it was asssociative, direct or nway 
if it was a hit i wrote the new data in the cache block and marked it as dirty
else if it was not a hit i located a cache block to use , checked if it ws dirty
if it was i wrote to memory and read from memory
else i just read from memory
then i wrote to cache blockand marked it as dirty

^^
i followed the rules of how caches are suppose to work 

direct caches were simpler since there is no LRU its just that one line in the set 
assoc:n were the hardest 

for the replacement algorithm i had an age as a value in the cache struct
then i had a for loop that gave me the oldest of every line in the set 

i incremented the age counter everytime another tag was put in there and i ended up taking the least of them all and that was the oldest 
